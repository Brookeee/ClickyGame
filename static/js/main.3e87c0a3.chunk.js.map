{"version":3,"sources":["components/Card/Card.js","components/Header/Header.js","components/Wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","process","image","onClick","clickHandler","id","Header","children","currScore","highScore","Wrapper","App","state","artists","guesses","result","indexOf","hIncrement","setState","concat","handleReset","scorNew","handleShuffle","mixUp","array","a","length","i","Math","floor","random","randomizer","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ojCAkBeA,MAbf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBACEC,IAAKF,EAAMG,KACXC,IAAKC,cAAyBL,EAAMM,MACpCC,QAAS,kBAAMP,EAAMQ,aAAaR,EAAMS,UCInCC,MAbf,SAAgBV,GACd,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,QAAQD,EAAMW,UAC5B,wBAAIV,UAAU,SAAd,mBACmBD,EAAMY,UADzB,kBACmDZ,EAAMa,WAEzD,0GCJSC,MAHf,SAAiBd,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,iBCqF5BI,E,2MAzEbC,MAAQ,CACNC,UACAC,QAAS,GACTN,UAAW,EACXC,UAAW,EACXM,OAAQ,I,EAGVX,aAAe,SAAAC,IAC2B,IAApC,EAAKO,MAAME,QAAQE,QAAQX,IAC7B,EAAKY,aACL,EAAKC,SAAS,CAAEJ,QAAS,EAAKF,MAAME,QAAQK,OAAOd,MAEnD,EAAKe,e,EAITH,WAAa,WACX,IAAMI,EAAU,EAAKT,MAAMJ,UAAY,EACvC,EAAKU,SAAS,CACZV,UAAWa,EACXN,OAAQ,mBAENM,GAAW,EAAKT,MAAMH,UACxB,EAAKS,SAAS,CAAET,UAAWY,IACN,KAAZA,GACT,EAAKH,SAAS,CAAEH,OAAQ,sBAE1B,EAAKO,iB,EAGPF,YAAc,WACZ,EAAKF,SAAS,CACZV,UAAW,EACXC,UAAW,EAAKG,MAAMH,UACtBM,OAAQ,2BACRD,QAAS,KAGX,EAAKQ,iB,EAGPA,cAAgB,WACd,IAAIC,EApDR,SAAoBC,GAClB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,EA+COO,CAAWlB,GACvB,EAAKK,SAAS,CAAEL,QAASU,K,wEAGjB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEf,UAAWwB,KAAKpB,MAAMJ,UACtBC,UAAWuB,KAAKpB,MAAMH,UACtBM,OAAQiB,KAAKpB,MAAMG,QAHrB,4BAOCiB,KAAKpB,MAAMC,QAAQoB,IAAI,SAAApB,GAAO,OAC7B,kBAAC,EAAD,CACER,GAAIQ,EAAQR,GACZ6B,IAAKrB,EAAQR,GACbN,KAAMc,EAAQd,KACdG,MAAOW,EAAQX,MACfE,aAAc,EAAKA,aACnBa,WAAY,EAAKA,WACjBG,YAAa,EAAKA,YAClBE,cAAe,EAAKA,uB,GAnEda,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3e87c0a3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Render images\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img\r\n          alt={props.name}\r\n          src={process.env.PUBLIC_URL + props.image}\r\n          onClick={() => props.clickHandler(props.id)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;\r\n","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"head\">{props.children}</h1>\r\n      <h2 className=\"score\">\r\n        Current Score:  {props.currScore} | High Score: {props.highScore}\r\n      </h2>\r\n      <h3>\r\n        Select a musical artists to begin. Click one image only ONCE. Good luck!\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\nexport default Wrapper;","import React, { Component } from \"react\";\nimport Card from \"./components/Card/Card\";\nimport Header from \"./components/Header/Header\";\nimport Wrapper from \"./components/Wrapper/wrapper\";\nimport artists from \"./artists.json\";\nimport \"./App.css\";\n\nfunction randomizer(array) {\n  for (let a = array.length - 1; a > 0; a--) {\n    let i = Math.floor(Math.random() * (a + 1));\n    [array[a], array[i]] = [array[i], array[a]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    artists,\n    guesses: [],\n    currScore: 0,\n    highScore: 0,\n    result: \"\"\n  };\n\n  clickHandler = id => {\n    if (this.state.guesses.indexOf(id) === -1) {\n      this.hIncrement();\n      this.setState({ guesses: this.state.guesses.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  hIncrement = () => {\n    const scorNew = this.state.currScore + 1;\n    this.setState({\n      currScore: scorNew,\n      result: \"Correcto Mundo\"\n    });\n    if (scorNew >= this.state.highScore) {\n      this.setState({ highScore: scorNew });\n    } else if (scorNew === 12) {\n      this.setState({ result: \"Success! You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currScore: 0,\n      highScore: this.state.highScore,\n      result: \"Sorry, you got it wrong!\",\n      guesses: []\n    });\n\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let mixUp = randomizer(artists);\n    this.setState({ artists: mixUp });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Header\n          currScore={this.state.currScore}\n          highScore={this.state.highScore}\n          result={this.state.result}\n        >\n          Music Artists Click Game\n        </Header>\n        {this.state.artists.map(artists => (\n          <Card\n            id={artists.id}\n            key={artists.id}\n            name={artists.name}\n            image={artists.image}\n            clickHandler={this.clickHandler}\n            hIncrement={this.hIncrement}\n            handleReset={this.handleReset}\n            handleShuffle={this.handleShuffle}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}